#!/bin/sh

# This script uses a librarian-puppet Puppetfile to print out an r10k Puppetfile

# complete with all puppet module dependencies. While librarian-puppet and r10k
# share Puppetfile syntax, the r10k software will not install puppet module
# dependencies. In order to not have to manually manage dependencies, this script
# allows us to generate r10k Puppetfiles from librarian-puppet Puppetfiles.

# Verify librarian-puppet is in the PATH
which librarian-puppet > /dev/null
if [ $? -ne 0 ]
then
  >&2 echo "librarian-puppet must be in your PATH."
  exit 1
fi

# Verify a Puppetfile is in the current working directory
if [ ! -f ./Puppetfile ]
then
  >&2 echo "librarian-puppet requires a Puppetfile in the current directory."
  exit 3
fi

# Have librarian-puppet install dependent modules in the local modules directory

librarian-puppet install --clean > /dev/null
retval=$?

if [ $retval -ne 0 ]
then
  >&2 echo "`librarian-puppet install --clean` command failed with exit code ${retval}."
  exit 2
fi

# Generate an r10k Puppetfile by including the librarian-puppet Puppetfile
# verbatim and then appending the discovered public forge module dependencies.

echo '# DO NOT MODIFY DIRECTLY!!!'
echo '# This Puppetfile has been generated by the lp2r10k tool using the'
echo '# librarian-puppet/Puppetfile.'
echo
cat Puppetfile
echo
echo \# lp2r10k generated dependent modules:

librarian-puppet show \
| tr \  \* \
| for modver in `xargs`
do
  mod=`echo $modver | cut -d*  -f1`
  ver=`echo $modver | cut -d*  -f2 | tr -d \(\)`
  # Puppet supports separating owner from module name with a single - or /
  # Translate it to a . here so grep will match either.
  escaped_mod=`echo ${mod} | tr /- .`
  # Skip modules that are already specified in the l-p Puppetfile
  if ! grep -q ^\ *mod\ *[\'\"]${escaped_mod}[\'\"] Puppetfile
  then
    echo mod \'${mod}\', \'${ver}\'
  fi
done

# Clean up librarian-puppet artifacts.
rm -Rf Puppetfile.lock modules .librarian .tmp
